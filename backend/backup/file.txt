func newfileUploadRequest(uri string, params map[string]string, paramName string, path string) (*http.Request, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	fileContents, err := ioutil.ReadAll(file)
	if err != nil {
		return nil, err
	}
	// fi, err := file.Stat()
	// if err != nil {
	// 	return nil, err
	// }

	defer file.Close()

	body := &bytes.Buffer{}

	writer := multipart.NewWriter(body)
	defer writer.Close()
	log.Println("----------------------------------------------------------------", paramName)
	part, err := writer.CreateFormFile(paramName, "/Users/fanzru/Project/Kuliah/web-anotasi-paper/backend/a.pdf")
	if err != nil {
		return nil, err
	}
	log.Println("---------------------------------------------------------------- masuk 1")
	num, err := part.Write(fileContents)
	if err != nil {
		log.Fatal("error writing file")
	}
	log.Println("----------------------------", num)
	// _, err = io.Copy(part, file)
	log.Println("---------------------------------------------------------------- masuk 2")

	for key, val := range params {
		writer.WriteField(key, val)
	}
	log.Println("---------------------------------------------------------------- masuk 3")
	part.Write(fileContents)
	err = writer.Close()
	if err != nil {
		return nil, err
	}
	log.Println("---------------------------------------------------------------- masuk 4")
	log.Println(body)
	log.Println("---------------------------------------------------------------- masuk 5")
	req, err := http.NewRequest("POST", uri, body)

	req.Header.Add("Content-Type", writer.FormDataContentType())
	//req.Header.Add("Content-Type", "multipart/form-data")
	req.Header.Add("Accept", "*/*")
	//req.Header.Set("Content-Type", "multipart/form-data")
	log.Println("-------- loading hit outbond")
	return req, err
}

func ArtuAzController(c echo.Context) error {
	result, status := utils.ExtractClaims(c)
	if !status {
		return c.JSON(http.StatusInternalServerError, utils.ResponseError("Token invalid!"))
	}

	name := c.FormValue("paper_id")
	file, err := c.FormFile("pdf_article")
	if err != nil {
		return err
	}
	src, err := file.Open()
	if err != nil {
		return err
	}

	defer src.Close()
	srcFile := "/Users/fanzru/Project/Kuliah/web-anotasi-paper/backend/a.pdf"
	// Destination
	dst, err := os.Create(srcFile)
	if err != nil {
		return err
	}
	defer dst.Close()
	// defer os.Remove(srcFile)

	if name == "" || file == nil {
		return c.JSON(http.StatusInternalServerError, utils.ResponseError("Please put all form data!"))
	}

	// bodyBuf := &bytes.Buffer{}
	// bodyWriter := multipart.NewWriter(bodyBuf)

	// outbound
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	hc := http.Client{Transport: tr}

	// form := url.Values{}
	// form.Add("paper_id", name)
	// form.Add("pdf_article", srcFile)
	// bodyWriter.CreateFormField("paper_id")
	// bodyWriter.WriteField("paper_id", name)
	// bodyWriter.CreateFormFile("pdf_article", "file")
	// bodyWriter.WriteField("pdf_article", srcFile)
	// bodyWriter.FormDataContentType()
	// log.Println("-------- loading set up request")
	// log.Println(bodyBuf)

	// buf := new(bytes.Buffer)
	// w := multipart.NewWriter(buf)

	// x, _ := w.CreateFormField("paper_id")
	// x.Write([]byte(name))

	// y1, _ := w.CreateFormFile("pdf_article", "file")
	// y1.Write([]byte(srcFile))

	// defer w.Close()
	// //b := bytes.NewBufferString(bodyBuf)
	// req, err := http.NewRequest(http.MethodPost, "https://ir-group.ec.tuwien.ac.at/artu_az_identification/identify_az", buf)
	// if err != nil {
	// 	return c.JSON(http.StatusInternalServerError, utils.ResponseError("Config Outbound Error!"))
	// }

	extraParams := map[string]string{
		"paper_id": name,
	}
	request, err := newfileUploadRequest("https://ir-group.ec.tuwien.ac.at/artu_az_identification/identify_az", extraParams, "pdf_article", srcFile)
	if err != nil {
		log.Fatal(err)
	}

	resp, err := hc.Do(request)
	// log.Println("ini resp :", resp.Body)
	// b, err := json.MarshalIndent(resp.Body, "", "  ")
	// fmt.Println(string(b))
	// log.Println("ini err :", err)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, utils.ResponseError("Server Outbound Error!", err))
	}

	if resp.StatusCode != 200 {
		return c.JSON(resp.StatusCode, utils.ResponseError(resp.Status, err))
	}

	return c.JSON(http.StatusOK, utils.ResponseSuccess("Success", result))
}

dir, err := os.Getwd()
	if err != nil {
		return c.JSON(http.StatusInternalServerError, utils.ResponseError("Getwd"))
	}
	filename := fileUpload.Filename

	fileLocation := filepath.Join(dir, "files", filename)
	targetFile, err := os.OpenFile(fileLocation, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, utils.ResponseError("OpenFile"))

	}
	defer targetFile.Close()

	if _, err := io.Copy(targetFile); err != nil {
		return c.JSON(http.StatusInternalServerError, utils.ResponseError("io.Copy"))
	}

	w.Write([]byte("done"))